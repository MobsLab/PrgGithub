
% if save ==0 > result aren't saved
% if save ==1 > result are saved
Save=1;
disp(['save    >         ',num2str(Save)])


%---------------------------------------------------------------------------------------------------------------
%---------------------------------------------------------------------------------------------------------------

load behavResources
posX=Data(X);
posY=Data(Y);
tpsX=Range(X);
tpsY=Range(Y);


try load Circle
catch
    
    % Definition du centre du cercle
    figure, plot(posX,posY)
    hold on, axis([-5 105 -5 105])
    hold on, title('determiner les quatres limites du cercle')
    disp('determiner les quatres limites du cercle')
    [x,y]=ginput;
    Xcentre=mean(x);
    Ycentre=mean(y);
    hold on, plot(Xcentre,Ycentre,'go','linewidth',3)
    
    % Definition de la limite de l'arene
    VTheta=0:1:360;
    VTheta=VTheta*pi/180;
    
    close all
    figure, a=1;
    for i=1:4
        Rayon=sqrt((x(i,1)-Xcentre).*(x(i,1)-Xcentre)+(y(i,1)-Ycentre).*(y(i,1)-Ycentre));
        XCercle = Xcentre + Rayon * cos(VTheta);
        YCercle = Ycentre + Rayon * sin(VTheta);
        hold on, subplot(2,2,a)
        hold on, plot(posX,posY)
        hold on, axis([-5 105 -5 105])
        hold on, plot(XCercle, YCercle,'g','linewidth',2)
        hold on, title(['Cercle circonscrit selon axe  (nord/sud-est/ouest) > ',num2str(i)])
        a=a+1;
    end
    
    i=input('     choisir axe optimal (1-2)    >>>  ');
    Rayon=sqrt((x(i,1)-Xcentre).*(x(i,1)-Xcentre)+(y(i,1)-Ycentre).*(y(i,1)-Ycentre));
    XCercle = Xcentre + Rayon * cos(VTheta);
    YCercle = Ycentre + Rayon * sin(VTheta);
    close all
    figure, plot(posX,posY)
    hold on, plot(XCercle, YCercle,'r','linewidth',2)
    hold on, title(['Cercle session n°1 ',num2str(i)])
    
    % Definition de l'arène interieure (50% de l'aire totale)
    Air=(Rayon^2)*pi;
    AirIns=Air/2;
    RayonIns=sqrt(AirIns/pi);
    XCercleIns = Xcentre + RayonIns * cos(VTheta);
    YCercleIns = Ycentre + RayonIns * sin(VTheta);
    hold on, plot(XCercleIns, YCercleIns,'g','linewidth',2)
    hold on, axis([-5 105 -5 105])
    A1 = polyarea(XCercleIns, YCercleIns);
    A2 = polyarea(XCercle, YCercle);
    title(['Inside Circle Area = ',num2str(A1),'  vs  ',num2str(A2/2)]);
    
    %---------------------------------------------------------------------------------------
    save  Circle Xcentre Ycentre Rayon Xocto Yocto RayonIns XoctoIns YoctoIns  

    clear all
    load behavResources
    load Circle
    posX=Data(X);
    posY=Data(Y);
    tpsX=Range(X);
    tpsY=Range(Y);
end

%---------------------------------------------------------------------------------------
close all
figure, plot(posX,posY)
hold on, axis([-5 105 -5 105])
hold on, plot(Xocto,Yocto,'r','linewidth',3)
hold on, plot(XoctoIns, YoctoIns,'r','linewidth',2)
A1 = polyarea(Xocto, Yocto);
A2 = polyarea(XoctoIns, YoctoIns);
title(['Extenal Octogone : ',num2str(A1),' - Internal Octogone : ',num2str(A2)])

%---------------------------------------------------------------------------------------------------------------
%---------------------- adaptation a l'octogone centrale  ------------------------------
% >>> Restriction des données au perimetre central (position/temps/vitesse)
POSinside1=[];
in=inpolygon(X,Y,XCercleIns,YCercleIns);
POSinside1=[X(in),Y(in)];
hold on, plot(POSinside1(:,1), POSinside1(:,2),'r+','linewidth',1)

for i=1:length(POSinside1)
    for j=1:length(POSth1)
        if POSinside1(i,1)==POSth1(j,2) && POSinside1(i,2)==POSth1(j,3)
            POSinside1(i,3)=POSth1(j,1);
            POSinside1(i,4)=POSth1(j,4);
        end
    end
end


% >>> Calcul du nombre d'entrées/sorties
InOut1=[];
a=1;
for i=1:((length(POSth1))-1)
    if ((POSth1(i,2)-Xcentre)^2+(POSth1(i,3)-Ycentre)^2<=(RayonIns^2)) & ((POSth1(i+1,2)-Xcentre)^2+(POSth1(i+1,3)-Ycentre)^2>=(RayonIns^2))
        InOut1(a,1:4)=POSth1(i,:);
        a=a+1;
    end
end
for i=1:((length(POSth1))-1)
    if ((POSth1(i,2)-Xcentre)^2+(POSth1(i,3)-Ycentre)^2>=(RayonIns^2)) & ((POSth1(i+1,2)-Xcentre)^2+(POSth1(i+1,3)-Ycentre)^2<=(RayonIns^2))
        InOut1(a,1:4)=POSth1(i,:);
        a=a+1;
    end
end
disp(' ')
disp(' ')
disp(['   number of transition in session 1: ', num2str(length(InOut1))])

hold on, plot(XCercle, YCercle,'r','linewidth',2)
hold on, plot(XCercleIns, YCercleIns,'r','linewidth',2)
for i=1:length(InOut1);
    hold on, plot(InOut1(i,2),InOut1(i,3),'go','linewidth',2)
end
title(['number of transition in session 1:    ',num2str(length(InOut1))])

TransMin1=length(InOut1)/((length(Pos)/8)/60);
ok=input('     number of transition ok ? (o/n)    >>>  ','s');
if ok=='n',
    numb=input('     what is the right number of transition    >>>  ');
    TransMin1=numb/((length(Pos)/8)/60);
    disp(['   number of transition in session 1: ', num2str(numb)])
else
end

    
% Calcul du temps passé dans le perimetre central (%)
tpsIns1=0;
for i=1:(length(POSinside1)-1)
    if POSinside1(i+1,3)-POSinside1(i,3)>0 & POSinside1(i+1,3)-POSinside1(i,3)<2
       tpsIns1=tpsIns1+(POSinside1(i+1,3)-POSinside1(i,3));
    end
end
a=length(POSth1);
TPStotal1=POSth1(a,1);
TPSrelatif1=(tpsIns1/TPStotal1)*100;
disp(['   Time spent in central area in session 1: ', num2str(tpsIns1)])
disp(['   % of spent time in central area in session 1: ', num2str(TPSrelatif1)])
disp(' ')
disp(' ')
disp(' ')
disp(' ')


%--------------------------------------------------------------------------
save  behavDataOcto posAll  tpsIns InOut TransMin 
%--------------------------------------------------------------------------