%% Scirpt Version Of spinky toolbox
% This script uses "spinky" toolbox to detect spindles and/or kcomplex on EEG data 
% For more details about the method please refer to our papers 
% 1.Lajnef, T., Chaibi, S., Eichenlaub, J. B., Ruby, P. M., Aguera, P. E., Samet, M.Kachouri A  Jerbi, K. (2015). Sleep spindle and K-complex detection using tunable Q-factor wavelet transform and morphological component analysis. Frontiers in human neuroscience, 9.
% 2.Lajnef,T. O'reilly C, Coombrisson E, Chaibi S, Eichenlaub J.B, Ruby, P M,Aguera P.E Samet, M. Kachouri A, Frenette S,  Carrier J, Jerbi, K. (2016) Meet Spinky: An open-source Spindle and K-complex detection toolbox validated on the open-access Montreal Archive of Sleep Studies (MASS) (under review)


%% Parameters 
%% 
%  epoch_length: Data window (sec) // This is often the duration of an epoch used for e.g. in sleep staging, i.e. 30s or 20s
%  Example
epoch_length=30; 
%%
%  fs : Sampling frequency (Hz)
%  Example
fs=1000;         
%% 
%  Select your detection mode:
detection_mode='spindles';  
%    1. 'kcopmlex' to detect only kcopmlex 
%    2. 'spindles' to detect only spindles events
%    3. 'both' to detect spindles and kcomplex

%%
%  subj_name: Subject or data name; this value will be the name of the text file in which automatic detection results will be saved                           
subj_name='subject1';         
%%
%  user_defined_thresholds_4_ROC: This parametre define the way you choose to select the optimal threshold: 
%       0 if you wish to estimate thresholds range based on data properties.
%       1 if you wish to define your own range
user_defined_thresholds_4_ROC =0;   
%%
%  sp_thresh_user and/ or kp_thresh_user: 
% Manually selected spindle and/ or kcomplex thresholds ranges which will be used in the training porcess (ROC generation) 
sp_thresh_user=280:5:300;              
%% 
%  train_data_file:
%  Training data loading format required: (1xN) vector EEG training data for one channel (e.g time series for channel C3) 
%  'kcomplex_visual_score' and/or 'spindles_visual_score' .mat file path containing the number of kcomplex visually marked by an expert in each segment of data (duration defined by param "epoch_length", eg. 30s);       
train_data_file='training_data.mat';
kcomplex_visual_score='train_sc_kp.mat';   
spindles_visual_score='train_sc_sp.mat';
%%
%  test_data_file:
% .mat file containing EEG data of one subject and one electrode (1xN vector) 
test_data_file='test_data.mat';        

%%  load training epochs for Spindles and/or K-complexes
 x=load(train_data_file);  
 X=fieldnames(x);
 train_data=x.(X{1});
%%
%  load data for visual score corresponding to the previously loaded training data
y=load(kcomplex_visual_score);
Y=fieldnames(y);
kp_train_score=y.(Y{1});
z=load(spindles_visual_score);
Z=fieldnames(z);
sp_train_score=z.(Z{1});
%% 
%  Define the threshold range that will be used to generate the pseudo ROC
if (user_defined_thresholds_4_ROC)==1
    sp_thresh=sp_thresh_user;  
    kp_thresh=kp_thresh_user; 
else
    [kp_thresh] =kp_thresholds_ranges(train_data,fs,epoch_length);
    [sp_thresh] =sp_thresholds_ranges(train_data,fs,epoch_length);
end

%% Optimal threshold selection using pseudo ROC curve on "training data"
[op_thr_sp,op_thr_kp] = training_process(train_data,fs,epoch_length,detection_mode,sp_thresh,sp_train_score,kp_thresh,kp_train_score);

%% Use selected threshold on remaining data ("test" set)
  % Load the data set for automatic detection

x=load(test_data_file); 
X=fieldnames(x);
data=x.(X{1});
%%
 % Lunch detection process
[nbr_sp,pos_sp,nbr_kc,pos_kc]=test_process(data,fs,epoch_length,subj_name,detection_mode,op_thr_sp,op_thr_kp);
    

    

    
    