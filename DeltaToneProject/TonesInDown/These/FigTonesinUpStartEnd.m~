%%FigTonesinUpStartEnd
% 02.12.2019 KJ
%
%
%   see 
%       TonesInUpStartEndSleep ShamInUpStartEndSleep
%


%load
clear

load(fullfile(FolderDeltaDataKJ,'TonesInUpStartEndSleep.mat'))
load(fullfile(FolderDeltaDataKJ,'ShamInUpStartEndSleep.mat'))


%params
edges_delay = -400:5:400;
edges_norm  = 0:0.05:1;
normalized = 1;
animals = unique(tones_res.name);


%% transitions probability

%tones
proba.begin.tones = [];
proba.end.tones = [];

for m=1:length(animals)
    
    probbegin_mouse = [];
    probend_mouse   = [];
    for p=1:length(tones_res.path)
        if strcmpi(tones_res.name{p},animals{m})
            probbegin_mouse = [probbegin_mouse tones_res.begin.transit_rate{p}];
            probend_mouse = [probend_mouse tones_res.end.transit_rate{p}];
        end
    end
    
    proba.begin.tones = [proba.begin.tones mean(probbegin_mouse)];
    proba.end.tones   = [proba.end.tones mean(probend_mouse)];
end



%sham
proba.begin.sham = [];
proba.end.sham = [];
for m=1:length(animals)
    
    probbegin_mouse = [];
    probend_mouse   = [];
    for p=1:length(sham_res.path)
        if strcmpi(sham_res.name{p},animals{m})
            probbegin_mouse = [probbegin_mouse sham_res.begin.transit_rate{p}];
            probend_mouse   = [probend_mouse sham_res.end.transit_rate{p}];
        end
    end
    
    proba.begin.sham = [proba.begin.sham mean(probbegin_mouse)];
    proba.end.tones   = [proba.end.tones mean(probend_mouse)];
end


%% MUA response

met_y.begin.tones  = [];
met_y.begin.sham  = [];
met_y.end.tones  = [];
met_y.end.sham  = [];

for m=1:length(animals)
    
    mouse_y.begin.tones  = [];
    mouse_y.begin.sham  = [];
    mouse_y.end.tones  = [];
    mouse_y.end.sham  = [];

    %tones
    for p=1:length(tones_res.path)
        if strcmpi(tones_res.name{p},animals{m})
            mouse_x.begin.tones = tones_res.begin.met_mua{p}(:,1);
            mouse_x.end.tones   = tones_res.end.met_mua{p}(:,1);
            
            if normalized
                x_norm = mouse_x.begin.tones<-300;
                normfact.begin = mean(tones_res.begin.met_mua{p}(x_norm,2));
                normfact.end = mean(tones_res.end.met_mua{p}(x_norm,2));
            else
                normfact.begin = 1; 
                normfact.end = 1; 
            end
            mouse_y.begin.tones = [mouse_y.begin.tones tones_res.begin.met_mua{p}(:,2)/normfact.begin];
            mouse_y.end.tones   = [mouse_y.end.tones tones_res.end.met_mua{p}(:,2)/normfact.end];
        end
    end
    
    %Sham
    for p=1:length(sham_res.path)
        if strcmpi(sham_res.name{p},animals{m})
            mouse_x.begin.sham  = sham_res.begin.met_mua{p}(:,1);
            mouse_x.end.sham    = sham_res.end.met_mua{p}(:,1);
            if normalized
                x_norm = mouse_x.begin.tones<-300;
                normfact.begin = mean(sham_res.begin.met_mua{p}(x_norm,2));
                normfact.end = mean(sham_res.end.met_mua{p}(x_norm,2));
            else
                normfact.begin = 1; 
                normfact.end = 1; 
            end
            mouse_y.begin.sham  = [mouse_y.begin.sham sham_res.begin.met_mua{p}(:,2)];
            mouse_y.end.sham    = [mouse_y.end.sham sham_res.end.met_mua{p}(:,2)];
            
        end
    end

    %average per mouse
    met_y.begin.tones = [met_y.begin.tones mean(mouse_y.begin.tones,2)];
    met_y.begin.sham  = [met_y.begin.sham mean(mouse_y.begin.sham,2)];
    met_y.end.tones   = [met_y.end.tones mean(mouse_y.end.tones,2)];
    met_y.end.sham    = [met_y.end.sham mean(mouse_y.end.sham,2)];
    
    met_x.begin.tones = mouse_x.begin.tones;
    met_x.begin.sham  = mouse_x.begin.sham;
    met_x.end.tones   = mouse_x.end.tones;
    met_x.end.sham    = mouse_x.end.sham;

end
   
%mean
mua_mean.begin.tones.y = mean(met_y.begin.tones, 2);
mua_mean.begin.sham.y  = mean(met_y.begin.sham, 2);
mua_mean.end.tones.y   = mean(met_y.end.tones, 2);
mua_mean.end.sham.y    = mean(met_y.end.sham, 2);

%std
mua_mean.begin.tones.std = std(met_y.begin.tones,0,2) / sqrt(size(met_y.begin.tones,2));
mua_mean.begin.sham.std  = std(met_y.begin.sham,0,2) / sqrt(size(met_y.begin.sham,2));
mua_mean.end.tones.std   = std(met_y.end.tones,0,2) / sqrt(size(met_y.end.tones,2));
mua_mean.end.sham.std    = std(met_y.end.sham,0,2) / sqrt(size(met_y.end.sham,2));
    
%x
mua_mean.begin.tones.x  = met_x.begin.tones;
mua_mean.begin.sham.x  = met_x.begin.sham;
mua_mean.end.tones.x  = met_x.end.tones;
mua_mean.end.sham.x  = met_x.end.sham;



%% PLOT
fontsize = 20;
paired = 1;
optiontest = 'ranksum';
x_impact = 31;
smoothing = 0;

color_begin = 'b';
color_end = 'r';

color_tones = [0 0 1];
color_sham  = [0.3 0.3 0.3];
colors_tones = {[0 0 1],[0.53 0.81 0.98]}; 
colors_sham = {[0.3 0.3 0.3],[0.7 0.7 0.7]};



figure, hold on


% MUA Tones
clear h
subplot(2,2,1), hold on
errorbar(mua_mean.begin.tones.x, mua_mean.begin.tones.y, mua_mean.begin.tones.std, 'color', color_begin,'CapSize',1)
errorbar(mua_mean.end.tones.x, mua_mean.end.tones.y, mua_mean.end.tones.std, 'color', color_end,'CapSize',1)
h(1) = plot(mua_mean.begin.tones.x, mua_mean.begin.tones.y, 'color', color_begin, 'linewidth', 2);
h(2) = plot(mua_mean.end.tones.x, mua_mean.end.tones.y, 'color', color_end, 'linewidth', 2);
set(gca,'YLim', [0 2],'XLim',[-400 400],'Fontsize',fontsize);
line([0 0],get(gca,'ylim'),'linewidth',2,'color',[0.7 0.7 0.7]);
line([x_impact x_impact], ylim,'linewidth',1,'color',[0.7 0.7 0.7]), hold on
lgd = legend(h, 'begin', 'end'); lgd.Location='northwest';
xlabel('time from tones (ms)'), ylabel('Averaged MUA'),
title('Tones')



% %Transitions
% PlotErrorBarN_KJ(data_pv{i}, 'newfig',0, 'barcolors',barcolors, 'paired',1, 'optiontest',sigtest, 'showPoints',showPoints,'ShowSigstar',showsig);
% 
% 
% %Transition probability
% subtightplot(6,4,[11 15],gap), hold on
% XL = [0.9 2.1];
% Xbar = [1.2 1.8];
% 
% notBoxPlot(proba.nrem.tones,Xbar(1), 'patchColors', colors_tones),
% notBoxPlot(proba.nrem.sham,Xbar(2), 'patchColors', colors_sham),
% for l=1:length(proba.nrem.tones)
%     line(Xbar, [proba.nrem.tones(l) proba.nrem.sham(l)], 'color', [0.7 0.7 0.7]),
% end
% line(Xbar, [0.75 0.75], 'color', 'k', 'linewidth', 1.5),
% text(mean(Xbar),0.77, '*', 'HorizontalAlignment','center','fontsize',20)
% set(gca,'ytick',0:0.25:1, 'ylim',[0 0.87],'Fontsize',fontsize),
% set(gca,'xtick',Xbar,'XtickLabel',{'tones','sham'},'xlim', XL),
% ylabel({'Up>Down ', 'transition probability'}),





