function A = positionResources(A)


load([current_dir(A) filesep 'PosFile.mat'])

A = registerResource(A, 'CorrectError', 'tsdArray', {1,1}, ...
    'correctError', ...
    ['a tsd with times corresponding to response and data = 1 for correct ', ...
    'trials and 0 for errors']);

A = registerResource(A, 'TrialOutcome', 'tsdArray', {1,1}, ...
    'trialOutcome', ...
    ['a tsd with times corresponding to response and data = 1 for left ', ...
    'trials and 0 for right, as per tracking']);

A = registerResource(A, 'LightRecord', 'tsdArray', {1,1}, ...
    'lightRecord', ...
    ['a tsd with times corresponding to response and data = 1 for light left ', ...
    'trials and 0 for light right, as per tracking']);


A = registerResource(A, 'AtRewardD', 'tsdArray', {1,1}, ...
    'at_reward_d', ...
    ['time of arrival at reward on departure arm']);

A = registerResource(A, 'AtRewardR', 'tsdArray', {1,1}, ...
    'at_reward_r', ...
    ['time of arrival at reward on right arm']);
A = registerResource(A, 'AtRewardL', 'tsdArray', {1,1}, ...
    'at_reward_l', ...
    ['time of arrival at reward on light arm']);


A = registerResource(A, 'OffRewardD', 'tsdArray', {1,1}, ...
    'off_reward_d', ...
    ['time of arrival from reward on departure arm']);

A = registerResource(A, 'OffRewardR', 'tsdArray', {1,1}, ...
    'off_reward_r', ...
    ['time of arrival at reward on right arm']);
A = registerResource(A, 'OffRewardL', 'tsdArray', {1,1}, ...
    'off_reward_l', ...
    ['time of departure from reward on light arm']);


A = registerResource(A, 'TimeD', 'cell', {1,1}, ...
    'time_d', ...
    ['intervalSet of time spent on departure arm']);

A = registerResource(A, 'TimeR', 'cell', {1,1}, ...
    'time_r', ...
    ['intervalSet of time spent on right arm']);

A = registerResource(A, 'TimeL', 'cell', {1,1}, ...
    'time_l', ...
    ['intervalSet of time spent on left arm']);
A = registerResource(A, 'TimePlat', 'cell', {1,1}, ...
    'time_plat', ...
    ['intervalSet of time spent on left arm']);


A = registerResource(A, 'PhiD', 'tsdArray', {1,1}, ...
    'phi_d', ...
    ['linearized coordinate on departure arm']);

A = registerResource(A, 'PhiL', 'tsdArray', {1,1}, ...
    'phi_d', ...
    ['linearized coordinate on departure arm']);

A = registerResource(A, 'PhiD', 'tsdArray', {1,1}, ...
    'phi_d', ...
    ['linearized coordinate on departure arm']);

A = registerResource(A, 'Vs', 'tsdArray', {1,1}, ...
    'Vs', ...
    ['linearized coordinate on departure arm']);

A = registerResource(A, 'XS', 'tsdArray', {1,1}, ...
    'XS', ...
    ['smoothed X coordinate']);

A = registerResource(A, 'YS', 'tsdArray', {1,1}, ...
    'YS', ...
    ['smoothed Y coordinate']);

A = registerResource(A, 'MazeInterval', 'cell', {1,1}, ...
    'mazeInterval', ...
    ['intervalSet of total time spent on maze']);


A = registerResource(A, 'PostReward', 'tsdArray', {1,1}, ...
    'postReward', ...
    ['times of leaving reward site']);

A = registerResource(A, 'StartTrial', 'tsdArray', {1,1}, ...
    'startTrial', ...
    ['times of trial beginning']);




f(1) = FirstTime(time_d);
f(2) = FirstTime(time_plat);
f(3) = FirstTime(time_l);
f(4) = FirstTime(time_r);

l(1) = LastTime(time_d);
l(2) = LastTime(time_plat);
l(3) = LastTime(time_l);
l(4) = LastTime(time_r);

mazeInterval = intervalSet(min(f), max(l));



if ~exist('startTrial', 'var')
    thresh = 7; %cm/sec, threshold to start trial)
    tl = Range(trialOutcome);

    tt = threshold(Vs,  thresh);
    startTrial = Restrict(tt, End(time_d), 'align', 'prev');
    ii = intervalSet(startTrial, trialOutcome, '-fixit');
    startTrial = ts(Start(ii));
    if length(tl) ~= length(End(ii));
        error('mismatch in length');
    end
    if any(End(ii) ~= tl)
        error('mismatch in trialOutcome');
    end
end

ii = tsdArray({off_reward_l, off_reward_l});
off_reward = oneSeries(ii);

postReward = Restrict(off_reward, trialOutcome, 'align', 'next');



A = saveAllResources(A);