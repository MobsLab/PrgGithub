function AO = DIRACSimpleMeasuresReact(A)
  
  A = registerResource(A, 'SMReactEV', 'numeric', {1, 1}, ...
		       'GlobalReactEV', ...
		       'Rate ReactEV computed from all cells');

  A = registerResource(A, 'SMReactEVr', 'numeric', {1, 1}, ...
		       'GlobalReactEVr', ...
		       'Rate reverse ReactEV computed from all cells');

  A = registerResource(A, 'SMReactCVEV', 'numeric', {1, 1}, ...
		       'GlobalReactCVEV', ...
		       'Rate CV ReactEV computed from pyr cells');

  A = registerResource(A, 'SMReactCVEVCI', 'numeric', {1, 2}, ...
		       'GlobalReactCVEVCI', ...
		       'bootstrap CI for SMReactCVEV');

  A = registerResource(A, 'SMReactCVEVr', 'numeric', {1, 1}, ...
		       'GlobalReactCVEVr', ...
		       'Rate CV reverse ReactEV computed from pyr cells');

  A = registerResource(A, 'SMReactCVEVrCI', 'numeric', {1, 2}, ...
		       'GlobalReactCVEVrCI', ...
		       'bootstrap CI for SMReactCVEVr');

  
  A = registerResource(A, 'SMReactCVXX', 'numeric', {1, 1}, ...
		       'GlobalReactCVXX', ...
		       'Rate CV  React correaltion computed from pyr cells');

  A = registerResource(A, 'SMReactCVXXCI', 'numeric', {1, 2}, ...
		       'GlobalReactCVXXCI', ...
		       'bootstrap CI for SMReactCVEVr');

  A = registerResource(A, 'SMReactCVXXr', 'numeric', {1, 1}, ...
		       'GlobalReactCVXXr', ...
		       'Rate CV  reverse React correaltion computed from pyr cells');

  A = registerResource(A, 'SMReactCVXXrCI', 'numeric', {1, 2}, ...
		       'GlobalReactCVXXrCI', ...
		       'bootstrap CI for SMReactCVEVr');


  
  
  A = registerResource(A, 'SMPyrReactEV', 'numeric', {1, 1}, ...
		       'PyrReactEV', ...
		       'Rate ReactEV computed from all cells');

  A = registerResource(A, 'SMPyrReactEVr', 'numeric', {1, 1}, ...
		       'PyrReactEVr', ...
		       'Rate reverse ReactEV computed from all cells');
  
  A = registerResource(A, 'SMSPWReactEV', 'numeric', {1, 1}, ...
		       'SPWReactEV', ...
		       'Rate ReactEV computed from all cells');

  A = registerResource(A, 'SMSPWReactEVr', 'numeric', {1, 1}, ...
		       'SPWReactEVr', ...
		       'Rate reverse ReactEV computed from all cells');
  
  A = registerResource(A, 'SMNoSPWReactEV', 'numeric', {1, 1}, ...
		       'NoSPWReactEV', ...
		       'Rate ReactEV computed from all cells');

  A = registerResource(A, 'SMNoSPWReactEVr', 'numeric', {1, 1}, ...
		       'NoSPWReactEVr', ...
		       'Rate reverse ReactEV computed from all cells');
  

  [A, frate_sleep1] = getResource(A, 'FRateSleep1');
  [A, frate_sleep2] = getResource(A, 'FRateSleep2');
  [A, frate_maze] = getResource(A, 'FRateMaze');
  [A, frate_presleep1] = getResource(A, 'FRatePreSleep1');
  [A, frate_postsleep2] = getResource(A, 'FRatePostSleep2');
  
  
  
  
  warning off
  [GlobalReactEV, GlobalReactEVr] = ReactEV(log10(frate_sleep1), ...
					    log10(frate_sleep2), ...
					    log10(frate_maze));
  warning on
  
  
  [A, pyr] = getResource(A, 'IsPyramid');
  pyr = find(pyr);
  
  warning off
  [PyrReactEV, PyrReactEVr] = ReactEV(log10(frate_sleep1(pyr)), ...
				      log10(frate_sleep2(pyr)), ...
				      log10(frate_maze(pyr)));
  warning on

  
  warning off
  [GlobalReactCVEV, GlobalReactCVEVCI] = ReactEVCV(log10(frate_presleep1(pyr)), ...
						   log10(frate_sleep1(pyr)), ...
						   log10(frate_maze(pyr)), ...
						   log10(frate_sleep2(pyr)));
  
  [GlobalReactCVEVr, GlobalReactCVEVrCI] = ReactEVCV(log10(frate_postsleep2(pyr)), ...
						   log10(frate_sleep2(pyr)), ...
						   log10(frate_maze(pyr)), ...
						   log10(frate_sleep1(pyr)));
  
  warning on

  
  [A, frate_sleep1] = getResource(A, 'FRateSPWSleep1');
  [A, frate_sleep2] = getResource(A, 'FRateSPWSleep2');
  [A, frate_maze] = getResource(A, 'FRateMaze');
  
  warning off
  [SPWReactEV, SPWReactEVr] = ReactEV(log10(frate_sleep1), ...
				      log10(frate_sleep2), ...
				      log10(frate_maze));
  warning on

  
  [A, frate_sleep1] = getResource(A, 'FRateNoSPWSleep1');
  [A, frate_sleep2] = getResource(A, 'FRateNoSPWSleep2');
  [A, frate_maze] = getResource(A, 'FRateMaze');
  
  warning off
  [NoSPWReactEV, NoSPWReactEVr] = ReactEV(log10(frate_sleep1), ...
					  log10(frate_sleep2), ...
					  log10(frate_maze));
  warning on
  
  
  
  
  
  warning off
  [r,clo, chi] = ...
      nancorrcoef(log10(frate_maze ./ frate_presleep1), ...
		  log10(frate_sleep2 ./ frate_sleep1), 0.05, 'bootstrap');
  GlobalReactCVXX = r(1,2);
  GlobalReactCVXXCI(1) = clo(1,2);
  GlobalReactCVXXCI(2) = chi(1,2);
  
  [r, clo, chi ] = ...
      nancorrcoef(log10(frate_maze ./ frate_postsleep2), ...
		  log10(frate_sleep1 ./ frate_sleep2), 0.05, 'bootstrap');
  GlobalReactCVXXr = r(1,2)^2;
  GlobalReactCVXXrCI(1) = clo(1,2)^2;
  GlobalReactCVXXrCI(2) = chi(1,2)^2;
  
  warning on 
  
  A = saveAllResources(A);
  
  AO = A;
  