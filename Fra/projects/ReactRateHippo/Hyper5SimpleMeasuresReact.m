function AO = Hyper5SimpleMeasuresReact(A)
  

  
  do_pyramids_only = 1;
  
  
  
  
  A = registerResource(A, 'SMReactCVEV', 'numeric', {1, 1}, ...
		       'GlobalReactCVEV', ...
		       ['Rate CV ReactEV computed from pyr cells', ...
		    'for the S1/M1/S2 epochs']);

  A = registerResource(A, 'SMReactCVEVCI', 'numeric', {1, 2}, ...
		       'GlobalReactCVEVCI', ...
		       ['bootstrap CI for SMReactCVEV']);

  A = registerResource(A, 'SMReactCVEVr', 'numeric', {1, 1}, ...
		       'GlobalReactCVEVr', ...
		       ['Rate CV reverse ReactEV computed from pyr cells', ...
		    ' for the S1/M1/S2 epochs']);

  A = registerResource(A, 'SMReactCVEVrCI', 'numeric', {1, 2}, ...
		       'GlobalReactCVEVrCI', ...
		       ['bootstrap CI for SMReactCVEVr']);

  
  A = registerResource(A, 'SMReactCVXX', 'numeric', {1, 1}, ...
		       'GlobalReactCVXX', ...
		       ['Rate CV  React correaltion computed from pyr cells', ...
		    ' for the S1/M1/S2 epochs']);

  A = registerResource(A, 'SMReactCVXXCI', 'numeric', {1, 2}, ...
		       'GlobalReactCVXXCI', ...
		       ['bootstrap CI for SMReactCVEVr']);

  A = registerResource(A, 'SMReactCVXXr', 'numeric', {1, 1}, ...
		       'GlobalReactCVXXr', ...
		       ['Rate CV  reverse React correaltion computed from pyr cells', ...
		    ' for the S1/M1/S2 epochs']);

  A = registerResource(A, 'SMReactCVXXrCI', 'numeric', {1, 2}, ...
		       'GlobalReactCVXXrCI', ...
		       ['bootstrap CI for SMReactCVEVr']);


  
  
  
  
%%%%%%%%%%%%%%%%%%%%%%%  
  
  
  A = registerResource(A, 'SMReactCVEV2', 'numeric', {1, 1}, ...
		       'GlobalReactCVEV2', ...
		       ['Rate CV ReactEV computed from pyr cells', ...
		    'for the S1/M1/S2 epochs']);

  A = registerResource(A, 'SMReactCVEV2CI', 'numeric', {1, 2}, ...
		       'GlobalReactCVEV2CI', ...
		       ['bootstrap CI for SMReactCVEV']);

  A = registerResource(A, 'SMReactCVEVr2', 'numeric', {1, 1}, ...
		       'GlobalReactCVEVr2', ...
		       ['Rate CV reverse ReactEV computed from pyr cells', ...
		    ' for the S1/M1/S2 epochs']);

  A = registerResource(A, 'SMReactCVEVr2CI', 'numeric', {1, 2}, ...
		       'GlobalReactCVEVr2CI', ...
		       ['bootstrap CI for SMReactCVEVr']);

  
  A = registerResource(A, 'SMReactCVXX2', 'numeric', {1, 1}, ...
		       'GlobalReactCVXX2', ...
		       ['Rate CV  React correaltion computed from pyr cells', ...
		    ' for the S1/M1/S2 epochs']);

  A = registerResource(A, 'SMReactCVXX2CI', 'numeric', {1, 2}, ...
		       'GlobalReactCVXX2CI', ...
		       ['bootstrap CI for SMReactCVEVr']);

  A = registerResource(A, 'SMReactCVXXr2', 'numeric', {1, 1}, ...
		       'GlobalReactCVXXr2', ...
		       ['Rate CV  reverse React correaltion computed from pyr cells', ...
		    ' for the S1/M1/S2 epochs']);

  A = registerResource(A, 'SMReactCVXXr2CI', 'numeric', {1, 2}, ...
		       'GlobalReactCVXXr2CI', ...
		       ['bootstrap CI for SMReactCVEVr']);
  
  
  
  %%%%%%%%%%%%%%%%%%%%
  
  
  A = registerResource(A, 'SMReactEV', 'numeric', {1, 1}, ...
		       'GlobalReactEV', ...
		       ['Rate ReactEV computed from all cells', ...
		        ' for the S1/M1/S2 epochs']);

  A = registerResource(A, 'SMReactEVr', 'numeric', {1, 1}, ...
		       'GlobalReactEVr', ...
		       ['Rate reverse ReactEV computed from all cells', ...
		        ' for the S1/M1/S2 epochs']);

  A = registerResource(A, 'SMReactEV2', 'numeric', {1, 1}, ...
		       'GlobalReactEV2', ...
		       ['Rate ReactEV computed from all cells', ...
		        ' for the S2/M2/S3 epochs']);

  A = registerResource(A, 'SMReactEVr2', 'numeric', {1, 1}, ...
		       'GlobalReactEVr2', ...
		       ['Rate reverse ReactEV computed from all cells', ...
		       ' for the S2/M2/S3']);

  A = registerResource(A, 'SMPyrReactEV', 'numeric', {1, 1}, ...
		       'PyrReactEV', ...
		       ['Rate ReactEV computed from all cells', ...
		        ' for the S1/M1/S2 epochs']);

  A = registerResource(A, 'SMPyrReactEVr', 'numeric', {1, 1}, ...
		       'PyrReactEVr', ...
		       ['Rate reverse ReactEV computed from all cells', ...
		        ' for the S1/M1/S2 epochs']);
  
  A = registerResource(A, 'SMPyrReactEV2', 'numeric', {1, 1}, ...
		       'PyrReactEV2', ...
		       ['Rate ReactEV computed from all cells', ...
		        ' for the S2/M2/S3 epochs']);

  A = registerResource(A, 'SMPyrReactEVr2', 'numeric', {1, 1}, ...
		       'PyrReactEVr2', ...
		       ['Rate reverse ReactEV computed from all cells', ...
		        ' for the S2/M2/S3 epochs']);
  
  A = registerResource(A, 'SMSPWReactEV', 'numeric', {1, 1}, ...
		       'SPWReactEV', ...
		       ['Rate ReactEV computed from all cells', ...
		        ' for the S1/M1/S2 epochs']);

  A = registerResource(A, 'SMSPWReactEVr', 'numeric', {1, 1}, ...
		       'SPWReactEVr', ...
		       ['Rate reverse ReactEV computed from all cells', ...
		        ' for the S1/M1/S2 epochs']);
  
  A = registerResource(A, 'SMSPWReactEV2', 'numeric', {1, 1}, ...
		       'SPWReactEV2', ...
		       ['Rate ReactEV computed from all cells', ...
		        ' for the S2/M2/S3 epochs']);

  A = registerResource(A, 'SMSPWReactEVr2', 'numeric', {1, 1}, ...
		       'SPWReactEVr2', ...
		       ['Rate reverse ReactEV computed from all cells', ...
		        ' for the S2/M2/S3 epochs']);
  
  A = registerResource(A, 'SMNoSPWReactEV', 'numeric', {1, 1}, ...
		       'NoSPWReactEV', ...
		       ['Rate ReactEV computed from all cells', ...
		        ' for the S1/M1/S2 epochs']);

  A = registerResource(A, 'SMNoSPWReactEVr', 'numeric', {1, 1}, ...
		       'NoSPWReactEVr', ...
		       ['Rate reverse ReactEV computed from all cells', ...
		        ' for the S1/M1/S2 epochs']);
  
  A = registerResource(A, 'SMNoSPWReactEV2', 'numeric', {1, 1}, ...
		       'NoSPWReactEV2', ...
		       ['Rate ReactEV computed from all cells', ...
		        ' for the S2/M2/S3 epochs']);

  A = registerResource(A, 'SMNoSPWReactEVr2', 'numeric', {1, 1}, ...
		       'NoSPWReactEVr2', ...
		       ['Rate reverse ReactEV computed from all cells', ...
		        ' for the S2/M2/S3 epochs']);
  
  
  [A, frate_sleep1] = getResource(A, 'FRateSleep1');
  [A, frate_sleep2] = getResource(A, 'FRateSleep2');
  [A, frate_sleep2_2] = getResource(A, 'FRateSleep2_2');
  [A, frate_sleep3] = getResource(A, 'FRateSleep3');
  [A, frate_maze] = getResource(A, 'FRateMaze');
  [A, frate_maze2] = getResource(A, 'FRateMaze2');
  [A, frate_presleep1] = getResource(A, 'FRatePreSleep1');
  [A, frate_postsleep3] = getResource(A, 'FRatePostSleep3');

  
  if do_pyramids_only
      pyr = max([frate_maze frate_sleep1 frate_sleep2], [], 2) > 0.5;
      frate_sleep1 = frate_sleep1(pyr);
      frate_sleep2 = frate_sleep2(pyr);      
      frate_sleep2_2 = frate_sleep2_2(pyr);            
      frate_sleep3 = frate_sleep3(pyr);            
      frate_presleep1 = frate_presleep1(pyr);
      frate_postsleep3 = frate_postsleep3(pyr);
      frate_maze = frate_maze(pyr);
      frate_maze2 = frate_maze2(pyr);
  end
  
  
  %%%%%%%%%%%%%%%%%%%%%%
  
  
  warning off
  
  
  [GlobalReactCVEV, GlobalReactCVEVCI] = ReactEVCV(log10(frate_presleep1), ...
						   log10(frate_sleep1), ...
						   log10(frate_maze), ...
						   log10(frate_sleep2));
  
  [GlobalReactCVEVr, GlobalReactCVEVrCI] = ReactEVCV(log10(frate_sleep2_2), ...
						   log10(frate_sleep2), ...
						   log10(frate_maze), ...
						   log10(frate_sleep1));
  
  
  [GlobalReactCVEV2, GlobalReactCVEV2CI] = ReactEVCV(log10(frate_sleep2), ...
						   log10(frate_sleep2_2), ...
						   log10(frate_maze2), ...
						   log10(frate_sleep3));
  
  [GlobalReactCVEVr2, GlobalReactCVEVr2CI] = ReactEVCV(log10(frate_postsleep3), ...
						   log10(frate_sleep3), ...
						   log10(frate_maze), ...
						   log10(frate_sleep2_2));
  
  
  
  
  [r,clo, chi] = ...
      nancorrcoef(log10(frate_maze ./ frate_presleep1), ...
		  log10(frate_sleep2 ./ frate_sleep1), 0.05, 'bootstrap');
  GlobalReactCVXX = r(1,2);
  GlobalReactCVXXCI(1) = clo(1,2);
  GlobalReactCVXXCI(2) = chi(1,2);
  
  [r, clo, chi ] = ...
      nancorrcoef(log10(frate_maze ./ frate_sleep2_2), ...
		  log10(frate_sleep1 ./ frate_sleep2), 0.05, 'bootstrap');
  GlobalReactCVXXr = r(1,2)^2;
  GlobalReactCVXXrCI(1) = clo(1,2)^2;
  GlobalReactCVXXrCI(2) = chi(1,2)^2;
  
  
  [r,clo, chi] = ...
      nancorrcoef(log10(frate_maze2 ./ frate_sleep2), ...
		  log10(frate_sleep3 ./ frate_sleep2_2), 0.05, 'bootstrap');
  GlobalReactCVXX2 = r(1,2);
  GlobalReactCVXX2CI(1) = clo(1,2);
  GlobalReactCVXX2CI(2) = chi(1,2);
  
  [r, clo, chi ] = ...
      nancorrcoef(log10(frate_maze2 ./ frate_postsleep3), ...
		  log10(frate_sleep2_2 ./ frate_sleep3), 0.05, 'bootstrap');
  GlobalReactCVXXr2 = r(1,2)^2;
  GlobalReactCVXXr2CI(1) = clo(1,2)^2;
  GlobalReactCVXXr2CI(2) = chi(1,2)^2;  
  
  

  warning on 
  
%%%%%%%%%%%%%%%%%%%%%%%5    
      
  warning off
  [GlobalReactEV, GlobalReactEVr] = ReactEV(log10(frate_sleep1), ...
					    log10(frate_sleep2), ...
					    log10(frate_maze));
  [GlobalReactEV2, GlobalReactEVr2] = ReactEV(log10(frate_sleep2_2), ...
					    log10(frate_sleep3), ...
					    log10(frate_maze2));
  warning on
  
  pyr= max([frate_maze frate_sleep1 frate_sleep2], [], 2) > ...
       0.5;

  warning off
  [PyrReactEV, PyrReactEVr] = ReactEV(log10(frate_sleep1(pyr)), ...
				      log10(frate_sleep2(pyr)), ...
				      log10(frate_maze(pyr)));
  [PyrReactEV2, PyrReactEVr2] = ReactEV(log10(frate_sleep2_2(pyr)), ...
				      log10(frate_sleep3(pyr)), ...
				      log10(frate_maze2(pyr)));
  warning on
  
  [A, frate_sleep1] = getResource(A, 'FRateSPWSleep1');
  [A, frate_sleep2] = getResource(A, 'FRateSPWSleep2');
  [A, frate_sleep2_2] = getResource(A, 'FRateSPWSleep2_2');
  [A, frate_sleep3] = getResource(A, 'FRateSPWSleep3');
  if do_pyramids_only

      frate_sleep1 = frate_sleep1(pyr);
      frate_sleep2 = frate_sleep2(pyr);      
      frate_sleep2_2 = frate_sleep2_2(pyr);            
      frate_sleep3 = frate_sleep3(pyr);            
  end
  
  warning off
  [SPWReactEV, SPWReactEVr] = ReactEV(log10(frate_sleep1), ...
				      log10(frate_sleep2), ...
				      log10(frate_maze));
  [SPWReactEV2, SPWReactEVr2] = ReactEV(log10(frate_sleep2_2), ...
				      log10(frate_sleep3), ...
				      log10(frate_maze2));
  warning on

  
  [A, frate_sleep1] = getResource(A, 'FRateNoSPWSleep1');
  [A, frate_sleep2] = getResource(A, 'FRateNoSPWSleep2');
  [A, frate_sleep2_2] = getResource(A, 'FRateNoSPWSleep2_2');
  [A, frate_sleep3] = getResource(A, 'FRateNoSPWSleep3');
  if do_pyramids_only

      frate_sleep1 = frate_sleep1(pyr);
      frate_sleep2 = frate_sleep2(pyr);      
      frate_sleep2_2 = frate_sleep2_2(pyr);            
      frate_sleep3 = frate_sleep3(pyr);            
  end
  
  warning off
  [NoSPWReactEV, NoSPWReactEVr] = ReactEV(log10(frate_sleep1), ...
					  log10(frate_sleep2), ...
					  log10(frate_maze));
  [NoSPWReactEV2, NoSPWReactEVr2] = ReactEV(log10(frate_sleep2_2), ...
					  log10(frate_sleep3), ...
					  log10(frate_maze2));
  warning on
  
  
 
  
  
  

  
  
  
  
  
  
  
  
  
  
  warning on
  
  %%%%%%%%%%%%%%%%%%%  
  A = saveAllResources(A);
  
  AO = A;
  
 