function [cf_,goodness,x_,resid]=ExpFIt(Y,X)
%CREATEFIT Create plot of data sets and fits
%   CREATEFIT(Y,X)
%   Creates a plot, similar to the plot in the main Curve Fitting Tool,
%   using the data that you provide as input.  You can
%   use this function with the same data you used with CFTOOL
%   or with different data.  You may want to edit the function to
%   customize the code and this help message.
%
%   Number of data sets:  1
%   Number of fits:  2

% Data from data set "X vs. Y":
%     X = Y:
%     Y = X:
%     Unweighted

% Auto-generated by MATLAB on 27-Jun-2014 09:23:09

% Set up figure to receive data sets and fits
% f_ = clf;
% figure(f_);
% set(f_,'Units','Pixels','Position',[927 312 674 482]);
% % Line handles and text for the legend.
% legh_ = [];
% legt_ = {};
% % Limits of the x-axis.
% xlim_ = [Inf -Inf];
% % Axes for the main plot.
% ax_ = axes;
% set(ax_,'Units','normalized','OuterPosition',[0 .5 1 .5]);
% % Axes for the residuals plot.
% ax2_ = axes;
% set(ax2_,'Units','normalized','OuterPosition',[0 0 1 .5]);
% set(ax2_,'Box','on');
% % Line handles and text for the residuals plot legend.
% legrh_ = [];
% legrt_ = {};
% set(ax_,'Box','on');
% axes(ax_);
% hold on;
% 
% % --- Plot data that was originally in data set "X vs. Y"
Y = Y(:);
X = X(:);
% h_ = line(Y,X,'Parent',ax_,'Color',[0.333333 0 0.666667],...
%     'LineStyle','none', 'LineWidth',1,...
%     'Marker','.', 'MarkerSize',12);
% xlim_(1) = min(xlim_(1),min(Y));
% xlim_(2) = max(xlim_(2),max(Y));
% legh_(end+1) = h_;
% legt_{end+1} = 'X vs. Y';
% 
% Nudge axis limits beyond data limits
% if all(isfinite(xlim_))
%     xlim_ = xlim_ + [-1 1] * 0.01 * diff(xlim_);
%     set(ax_,'XLim',xlim_)
%     set(ax2_,'XLim',xlim_)
% else
%     set(ax_, 'XLim',[-187.4540000039548886, 83019.45400005983538]);
%     set(ax2_,'XLim',[-187.4540000039548886, 83019.45400005983538]);
% end

% --- Create fit "fit 1"
ok_ = isfinite(Y) & isfinite(X);
if ~all( ok_ )
    warning( 'GenerateMFile:IgnoringNansAndInfs',...
        'Ignoring NaNs and Infs in data.' );
end
st_ = [102.38439332739449128 -8.9885568955045387174e-05 ];
ft_ = fittype('exp1');

% Fit this model using new data
[cf_,goodness] = fit(Y(ok_),X(ok_),ft_,'Startpoint',st_);
% Alternatively uncomment the following lines to use coefficients from the
% original fit. You can use this choice to plot the original fit against new
% data.
%    cv_ = { 95.540493636861441473, -7.8748818770634990008e-05};
%    cf_ = cfit(ft_,cv_{:});

% Plot this fit
% h_ = plot(cf_,'fit',0.95);
% set(h_(1),'Color',[1 0 0],...
%     'LineStyle','-', 'LineWidth',2,...
%     'Marker','none', 'MarkerSize',6);
% Turn off legend created by plot method.
% legend off;
% Store line handle and fit name for legend.
% legh_(end+1) = h_(1);
% legt_{end+1} = 'fit 1';
% 
% Compute and plot residuals.
res_ = X - cf_(Y);
[x_,i_] = sort(Y);
% axes(ax2_);
% hold on;
% h_ = line(x_,res_(i_),'Parent',ax2_,'Color',[1 0 0],...
%     'LineStyle','-', 'LineWidth',1,...
%     'Marker','.', 'MarkerSize',6);
% axes(ax_);
% hold on;
% legrh_(end+1) = h_;
% legrt_{end+1} = 'fit 1';
resid=res_(i_);
% --- Create fit "fit 1 copy 1"
ok_ = isfinite(Y) & isfinite(X);


% --- Finished fitting and plotting data. Clean up.
% hold off;
% % Display legend
% leginfo_ = {'Orientation', 'vertical', 'Location', 'NorthEast'};
% h_ = legend(ax_,legh_,legt_,leginfo_{:});
% set(h_,'Interpreter','none');
% leginfo_ = {'Orientation', 'vertical', 'Location', 'NorthEast'};
% h_ = legend(ax2_,legrh_,legrt_,leginfo_{:});
% set(h_,'Interpreter','none');
% % Remove labels from x- and y-axes.
% xlabel(ax_,'');
% ylabel(ax_,'');
% xlabel(ax2_,'');
% ylabel(ax2_,'');
% % Add titles to the plots.
% title(ax_,'Data and Fits');
% title(ax2_,'Residuals');
