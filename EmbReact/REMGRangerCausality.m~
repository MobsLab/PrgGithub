clear all
Dir=PathForExperimentsDeltaSleep2016('Basal');
keepGoodLow=3;
keepNoLow=1;
SaveFigFolder='/media/DataMOBsRAIDN/ProjectEmbReact/Figures/Nov2016/REMNeurons/';

% Granger options
order=16;
[params,movingwin,suffix]=SpectrumParametersML('low'); % low or high
plo=1;
Structures{1}='PFCx_deep';
Structures{2}='Bulb_deep';
Structures{3}='dHPC_rip';
StrucPairs=combntns([1:3],2);
BadMice={'Mouse244','Mouse294'};

for mm=2:length(Dir.path)
    mm
    try
        cd(Dir.path{mm})
        if not(strcmp(Dir.name{mm},BadMice{1}) | strcmp(Dir.name{mm},BadMice{2}))
            
            load('StateEpochSB.mat','REMEpoch')
            
            load('ChannelsToAnalyse/Bulb_deep.mat')
            Channel.OB=channel;
            % define epochs
            try, load(['SpectrumDataL/Spectrum',num2str(Channel.OB),'.mat'])
                Sptsd.OB=tsd(t*1e4,Sp);
                freq.OB=f;
            catch
                try
                    load('B_Low_Spectrum.mat')
                catch
                    disp('calculating OB spectrum')
                    LowSpectrumSB([cd,filesep],Channel.OB,'B',0)
                    load('B_Low_Spectrum.mat')
                end
                Sptsd.OB=tsd(Spectro{2}*1e4,Spectro{1});
                freq.OB=Spectro{3};
            end
            
            [Epoch,val,val2]=FindSlowOscBulb(Data(Sptsd.OB),t,freq.OB,REMEpoch,1,[5 8]);
            LitEp{1}=Epoch{keepGoodLow};
            LitEp{2}=REMEpoch-Epoch{keepNoLow};
            % get LFPs
            for k=1:3
                try
                    temp1=load(['ChannelsToAnalyse/',Structures{k},'.mat']);
                    eval(['temp1_1=load(''LFPData/LFP',num2str(temp1.channel),'.mat'');']);
                catch
                    if k==3
                        temp1=load(['ChannelsToAnalyse/dHPC_deep.mat']);
                        eval(['temp1_1=load(''LFPData/LFP',num2str(temp1.channel),'.mat'');']);
                        
                    end
                end
                
                LFP{k}=temp1_1.LFP;
                LFP{k}=ResampleTSD( LFP{k},250);
            end
            
            % calculate Granger
            disp('calculation')
            
            for ep=1:2
                for k=1:3
                    Tempxy=[];
                    Tempyx=[];
                    TempDur=[];
                    for ee=1:length(Start(LitEp{ep}))
                        NanoEp=subset(LitEp{ep},ee);
                        if Stop(NanoEp,'s')-Start(NanoEp,'s')>5
                            [Fx2ytemp,Fy2xtemp,freqBin]= GrangerSB(LFP{StrucPairs(k,1)},LFP{StrucPairs(k,2)},...
                                NanoEp,order,params,movingwin,0,{Structures{StrucPairs(k,1)},Structures{StrucPairs(k,2)}});
                            
                            TempDur=[TempDur,Stop(NanoEp,'s')-Start(NanoEp,'s')];
                            Tempxy=[Tempxy;Fx2ytemp.*(Stop(NanoEp,'s')-Start(NanoEp,'s'))];
                            Tempyx=[Tempyx;Fy2xtemp.*(Stop(NanoEp,'s')-Start(NanoEp,'s'))];
                        end
                    end
                    Fx2y{k,ep}=nanmean(Tempxy)/sum(TempDur);
                    Fy2x{k,ep}=nanmean(Tempyx)/sum(TempDur);
                    % average over epochs weighted by length
                    
                end
            end
            
            save('GrangerCausalityREM.mat','Fx2y','Fy2x','freqBin')
            disp('saved')
            
            RememberInfo{mm}.Fx2y=Fx2y;
            RememberInfo{mm}.Fy2x=Fy2x;
            RememberInfo{mm}.freqBin=freqBin;
            clear  Fx2y Fy2x freqBin
            disp('done')
            close all
        end
    end
end


figure
for ep=1:2
for k=1:3

    
end
end


figure
for k=1:3
    All{k,1}=[];
    All{k,2}=[];
    All{k,3}=[];
    All{k,4}=[];
    All{k,5}=[];
    
end
for pp=1:5
    for k=1:3
        %         subplot(3,1,k)
        %         plot(RememberInfo{pp}.freqBin{k},RememberInfo{pp}.Fx2y{k},'k')
        %         hold on
        %         plot(RememberInfo{pp}.freqBin{k},RememberInfo{pp}.Fy2x{k},'r')
        %         if pp==1
        %             StrucName={Structures{StrucPairs(k,1)},Structures{StrucPairs(k,2)}};
        %             legend([StrucName{1},'->',StrucName{2}],[StrucName{2},'->',StrucName{1}]);
        %         end
        All{k,1}=[All{k,1};RememberInfo{pp}.Fx2y{k}];
        All{k,2}=[All{k,2};RememberInfo{pp}.Fy2x{k}];
        if k==1
            All{k,3}=[All{k,3},RememberInfo{pp}.C_BP'];
            All{k,4}=[All{k,4},RememberInfo{pp}.C_HP'];
            All{k,5}=[All{k,5},RememberInfo{pp}.C_HB'];
        end
        
        
    end
end


figure
for k=1:3
    subplot(2,3,k)
    StrucName={Structures{StrucPairs(k,1)},Structures{StrucPairs(k,2)}};
    hold on
    plot(RememberInfo{pp}.freqBin{k},RememberInfo{pp}.Fx2y{k},'k')
    hold on
    plot(RememberInfo{pp}.freqBin{k},RememberInfo{pp}.Fy2x{k},'r')
    g=shadedErrorBar(RememberInfo{pp}.freqBin{k},nanmean(All{k,1}),[stdError(All{k,1});stdError(All{k,1})],'k');
    g=shadedErrorBar(RememberInfo{pp}.freqBin{k},nanmean(All{k,2}),[stdError(All{k,2});stdError(All{k,2})],'r');hold on
    
    legend([StrucName{1},'->',StrucName{2}],[StrucName{2},'->',StrucName{1}]);
    xlim([0 20])
    ylim([0 0.3])
    
    subplot(2,3,k+3)
    hold on
    g=shadedErrorBar(Spectro{3},nanmean(All{1,2+k}'),[stdError(All{1,2+k}');stdError(All{1,2+k}')],'k');
    ylim([0.4 0.9])
end